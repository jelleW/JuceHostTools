/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "../JuceLibraryCode/JuceHeader.h"
#include "Main.h"
#include "MainComponent.h"

#include "Application.h"
#include "PluginManager.h"
#include "AudioGraphManager.h"
#include "MidiManager.h"
#include "MultiOutMidiIn.h"

//==============================================================================
VSTHostGUITestApplication::VSTHostGUITestApplication() :
	BASEPluginHostApplication("VST Host GUI Test")
{}

//==============================================================================
void VSTHostGUITestApplication::init ()
{
    mainWindow = new MainWindow (getApplicationName());

	String midiInputName = "MainKeyboard";
	String vst_identifier_prophet = "VST-Prophet-V2-232abc38-50355632";
	String vst_identifier_vb3 = "VST-VB3-38faec7c-56423333";

	// init the device manager
	deviceManager = new AudioDeviceManager();
	ScopedPointer<XmlElement> savedAudioState(appProperties->getUserSettings()->getXmlValue("audioDeviceState"));

	deviceManager->initialise(4, 4, savedAudioState, true);

	// init the audio graph manager
	AudioGraphManager::getInstance()->init(deviceManager);

	// create new instance of the plugin
	AudioPluginInstance* prophetInstance = PluginManager::getInstance()->getNewPluginInstance(vst_identifier_prophet, AudioGraphManager::getInstance()->getSampleRate(), AudioGraphManager::getInstance()->getBlockSize());
	AudioPluginInstance* vb3Instance = PluginManager::getInstance()->getNewPluginInstance(vst_identifier_vb3, AudioGraphManager::getInstance()->getSampleRate(), AudioGraphManager::getInstance()->getBlockSize());

	// add instance in AudioProcessorGraph, with a node beforehand that can receive midi input
	int prophetNodeId = AudioGraphManager::getInstance()->createMidiReceivingNode(prophetInstance);
	int vb3NodeId = AudioGraphManager::getInstance()->createMidiReceivingNode(vb3Instance);

	// connect the node to the standard audio output in stereo
	AudioGraphManager::getInstance()->connectNodeToOutput(prophetNodeId, AudioGraphManager::Channels::getSTEREO());
	AudioGraphManager::getInstance()->connectNodeToOutput(vb3NodeId, AudioGraphManager::Channels::getSTEREO());

	// load the plugin editor
	PluginManager::getInstance()->getPluginEditor(AudioGraphManager::getInstance()->getNode(prophetNodeId))->setVisible(true);
	PluginManager::getInstance()->getPluginEditor(AudioGraphManager::getInstance()->getNode(vb3NodeId))->setVisible(true);

	// start the midi input callback
	MultiOutMidiIn* midiIn = MidiManager::getInstance()->getInput(midiInputName);
	midiIn->addListener(AudioGraphManager::getInstance()->getMidiMessageCollectorForNode(prophetNodeId));
	midiIn->addListener(AudioGraphManager::getInstance()->getMidiMessageCollectorForNode(vb3NodeId));
	midiIn->start();
}

void VSTHostGUITestApplication::close()
{
	delete deviceManager;
	delete mainWindow; // (deletes our window)
}


//==============================================================================
/*
    This class implements the desktop window that contains an instance of
    our MainContentComponent class.
*/
VSTHostGUITestApplication::MainWindow::MainWindow (String name)  : DocumentWindow (name,
                                                Colours::lightgrey,
                                                DocumentWindow::allButtons)
{
    setUsingNativeTitleBar (true);
	mainComponent = new MainContentComponent();
    setContentOwned (mainComponent, true);
	setResizable(true, true);

    centreWithSize (getWidth(), getHeight());
    setVisible (true);
}

void VSTHostGUITestApplication::MainWindow::closeButtonPressed()
{
    // This is called when the user tries to close this window. Here, we'll just
    // ask the app to quit when this happens, but you can change this to do
    // whatever you need.
	delete mainComponent;
    JUCEApplication::getInstance()->systemRequestedQuit();
}

    /* Note: Be careful if you override any DocumentWindow methods - the base
        class uses a lot of them, so by overriding you might break its functionality.
        It's best to do all your work in your content component instead, but if
        you really have to override any DocumentWindow methods, make sure your
        subclass also calls the superclass's method.
    */

//==============================================================================
// This macro generates the main() routine that launches the app.
START_JUCE_APPLICATION (VSTHostGUITestApplication)
